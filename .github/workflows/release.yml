name: Generate Package Lock and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"
      release_notes:
        description: "Release notes"
        required: false
        default: "New release with bug fixes and improvements"
      draft:
        description: "Create as draft release"
        required: false
        default: true
        type: boolean

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - name: Generate package-lock.json if missing
        run: |
          if [ ! -f "package-lock.json" ]; then
            echo "üì¶ package-lock.json not found, generating..."
            npm install --package-lock-only
            echo "‚úÖ package-lock.json generated"
          else
            echo "‚úÖ package-lock.json already exists"
          fi

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci

      - name: Build plugin
        run: |
          echo "Building plugin..."
          npm run build

      - name: Verify build output
        run: |
          echo "=== Verifying build output ==="
          echo "Root directory contents:"
          ls -la ./
          
          echo -e "\nChecking required files:"
          if [ -f "./main.js" ]; then
            echo "‚úÖ main.js found"
            echo "main.js size: $(stat -c%s main.js) bytes"
          else
            echo "‚ùå main.js not found"
            exit 1
          fi
          
          if [ -f "./manifest.json" ]; then
            echo "‚úÖ manifest.json found"
            cat manifest.json
          else
            echo "‚ùå manifest.json not found"
            exit 1
          fi

      - name: Update manifest version
        run: |
          echo "Updating manifest.json version..."
          version="${{ github.event.inputs.version }}"
          clean_version=${version#v}
          
          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          jq --arg version "$clean_version" '.version = $version' manifest.json > manifest.tmp
          mv manifest.tmp manifest.json
          
          echo "Updated manifest.json:"
          cat manifest.json

      - name: Commit package-lock.json if generated
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain package-lock.json)" ]; then
            echo "üìù Committing newly generated package-lock.json"
            git add package-lock.json
            git commit -m "chore: auto-generate package-lock.json"
            git push
          else
            echo "‚úÖ No changes to package-lock.json"
          fi

      - name: Create release package
        run: |
          echo "Creating release package..."
          mkdir -p release-files
          
          cp main.js release-files/
          cp manifest.json release-files/
          
          [ -f styles.css ] && cp styles.css release-files/
          [ -f README.md ] && cp README.md release-files/
          
          echo "Release files:"
          ls -la release-files/

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ github.event.inputs.version }}"
          release_notes="${{ github.event.inputs.release_notes }}"
          is_draft="${{ github.event.inputs.draft }}"
          
          echo "Creating release with tag: $tag"
          
          release_cmd="gh release create \"$tag\" --title \"Canvas Thumbnail Plugin $tag\""
          
          if [ "$is_draft" = "true" ]; then
            release_cmd="$release_cmd --draft"
          fi
          
          if [ -n "$release_notes" ]; then
            release_cmd="$release_cmd --notes \"$release_notes\""
          else
            release_cmd="$release_cmd --generate-notes"
          fi
          
          release_cmd="$release_cmd release-files/main.js release-files/manifest.json"
          [ -f release-files/styles.css ] && release_cmd="$release_cmd release-files/styles.css"
          
          eval $release_cmd
          
          echo "‚úÖ Release created successfully!"
